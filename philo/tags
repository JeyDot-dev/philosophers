!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AR	Makefile	/^AR          :=	ar$/;"	m
ARFLAGS	Makefile	/^ARFLAGS     :=	-r -c -s$/;"	m
BLK	Makefile	/^BLK	= \\033[30m$/;"	m
BLK	inc/philo.h	20;"	d
BLU	Makefile	/^BLU	= \\033[34m$/;"	m
BLU	inc/philo.h	24;"	d
BRN	Makefile	/^BRN	= \\033[33m$/;"	m
BUILD_D	Makefile	/^BUILD_D		:=	.build\/$/;"	m
CC	Makefile	/^CC			:=	gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS		:=	-Wextra -Werror -Wall -pthread$/;"	m
CPPFLAGS	Makefile	/^CPPFLAGS    :=	-MMD -MP $(addprefix -I,$(INC))$/;"	m
CYN	Makefile	/^CYN	= \\033[36m$/;"	m
CYN	inc/philo.h	26;"	d
DEPS	Makefile	/^DEPS        :=	$(OBJ:.o=.d)$/;"	m
DIR_DUP	Makefile	/^DIR_DUP     =	mkdir -p "$(@D)"$/;"	m
FRAMEWORK	Makefile	/^FRAMEWORK	:=	$/;"	m
GRN	Makefile	/^GRN	= \\033[32m$/;"	m
GRN	inc/philo.h	22;"	d
INC	Makefile	/^INC			:=	inc\/$/;"	m
LDFLAGS	Makefile	/^LDFLAGS     :=	$(addprefix -L,$(dir $(LIB_D))) -pthread$/;"	m
LDFMWK	Makefile	/^LDFMWK		:=	$(addprefix -framework ,$(FRAMEWORKS))$/;"	m
LDLIBS	Makefile	/^LDLIBS      :=	$(addprefix -l,$(LIB))$/;"	m
LGR	Makefile	/^LGR	= \\033[37m$/;"	m
MAG	inc/philo.h	25;"	d
NAME	Makefile	/^NAME		:=	philo$/;"	m
NB_OBJ	Makefile	/^NB_OBJ			:=	0$/;"	m
OBJ	Makefile	/^OBJ 		:=	$(SRC:$(SRC_D)%.c=$(BUILD_D)%.o)$/;"	m
PHILO_H	inc/philo.h	14;"	d
PUR	Makefile	/^PUR	= \\033[35m$/;"	m
RED	Makefile	/^RED	= \\033[31m$/;"	m
RED	inc/philo.h	21;"	d
RM	Makefile	/^RM			:=	rm -rf$/;"	m
RST	Makefile	/^RST	= \\033[0m$/;"	m
SRC	Makefile	/^SRC			:=	$(SRC:%=$(SRC_D)%)$/;"	m
SRC	Makefile	/^SRC			:=	main.c p_atoi.c set_user_input.c$/;"	m
SRC_D	Makefile	/^SRC_D		:=	src\/$/;"	m
TOTAL_OBJ	Makefile	/^TOTAL_OBJ		:=	$(words $(OBJ))$/;"	m
UNAME_S	Makefile	/^UNAME_S 	:= $(shell uname -s)$/;"	m
WHT	inc/philo.h	27;"	d
YEL	inc/philo.h	23;"	d
check_string	src/p_atoi.c	/^int	check_string(char *str)$/;"	f
check_time_coherence	src/set_user_input.c	/^void	check_time_coherence(t_parse parse)$/;"	f
count	Makefile	/^count = 0$/;"	m
do_routine	src/main.c	/^void	*do_routine(void *v_philo)$/;"	f
error	inc/philo.h	/^	int	error;$/;"	m	struct:s_parse
forks	inc/philo.h	/^	int	forks[2];$/;"	m	struct:s_philo
id	inc/philo.h	/^	int	id;$/;"	m	struct:s_philo
init_extension	src/main.c	/^t_philo *init_extension(t_philo *philos, t_parse parse, t_locks *locks)$/;"	f
init_philos	src/main.c	/^t_philo *init_philos(t_parse parse)$/;"	f
is_dead	inc/philo.h	/^	int	is_dead;$/;"	m	struct:s_philo
is_eating	inc/philo.h	/^	int	is_eating;$/;"	m	struct:s_philo
join_threads	src/main.c	/^int	join_threads(pthread_t *threads, int nb_philos)$/;"	f
l_forks	inc/philo.h	/^	pthread_mutex_t *l_forks;$/;"	m	struct:s_locks
l_is_dead	inc/philo.h	/^	pthread_mutex_t	*l_is_dead;$/;"	m	struct:s_locks
l_is_eating	inc/philo.h	/^	pthread_mutex_t	*l_is_eating;$/;"	m	struct:s_locks
l_last_eat	inc/philo.h	/^	pthread_mutex_t	*l_last_eat;$/;"	m	struct:s_locks
l_nb_eaten	inc/philo.h	/^	pthread_mutex_t	*l_nb_eaten;$/;"	m	struct:s_locks
l_print	inc/philo.h	/^	pthread_mutex_t	*l_print;$/;"	m	struct:s_locks
last_eat	inc/philo.h	/^	int	last_eat;$/;"	m	struct:s_philo
locks	inc/philo.h	/^	t_locks	*locks;$/;"	m	struct:s_philo
main	src/main.c	/^int	main(int ac, char **av)$/;"	f
malloc_philos	src/main.c	/^t_philo *malloc_philos(int nb_philos)$/;"	f
nb_eat	inc/philo.h	/^	int	nb_eat;$/;"	m	struct:s_parse
nb_eaten	inc/philo.h	/^	int	nb_eaten;$/;"	m	struct:s_philo
nb_philo	inc/philo.h	/^	int	nb_philo;$/;"	m	struct:s_parse
p_atoi	src/p_atoi.c	/^int	p_atoi(char *str)$/;"	f
p_strlen	src/p_atoi.c	/^int	p_strlen(char *str)$/;"	f
parse	inc/philo.h	/^	t_parse	parse;$/;"	m	struct:s_philo
print_error	src/set_user_input.c	/^int	print_error(char *str)$/;"	f
print_parse	src/set_user_input.c	/^void	print_parse(t_parse parse, int ac)$/;"	f
print_philos	src/main.c	/^void	print_philos(t_philo *philos, int nb_philos)$/;"	f
routine	src/main.c	/^int	routine(t_philo *philos)$/;"	f
routine_eat	src/main.c	/^int	routine_eat(t_philo *philo, struct timeval launch_time)$/;"	f
routine_put_forks	src/main.c	/^int routine_put_forks(t_philo *philo)$/;"	f
routine_sleep	src/main.c	/^int	routine_sleep(t_philo *philo, struct timeval launch_time)$/;"	f
routine_take_forks	src/main.c	/^int routine_take_forks(t_philo *philo, struct timeval launch_time)$/;"	f
routine_think	src/main.c	/^int	routine_think(t_philo *philo, struct timeval launch_time)$/;"	f
s_locks	inc/philo.h	/^typedef struct s_locks$/;"	s
s_parse	inc/philo.h	/^typedef struct	s_parse$/;"	s
s_philo	inc/philo.h	/^typedef struct	s_philo$/;"	s
set_user_extension	src/set_user_input.c	/^t_parse	set_user_extension(int ac, char **av, int i, t_parse parse)$/;"	f
set_user_input	src/set_user_input.c	/^t_parse	set_user_input(int ac, char **av)$/;"	f
start	inc/philo.h	/^	struct timeval	start;$/;"	m	struct:s_philo	typeref:struct:s_philo::timeval
super_sleep	src/main.c	/^void	super_sleep(struct timeval launch_time, int time)$/;"	f
swap_forks	src/main.c	/^t_philo *swap_forks(t_philo *philo, int i)$/;"	f
t_locks	inc/philo.h	/^}				t_locks;$/;"	t	typeref:struct:s_locks
t_parse	inc/philo.h	/^}				t_parse;$/;"	t	typeref:struct:s_parse
t_philo	inc/philo.h	/^}				t_philo;$/;"	t	typeref:struct:s_philo
time_die	inc/philo.h	/^	int	time_die;$/;"	m	struct:s_parse
time_eat	inc/philo.h	/^	int	time_eat;$/;"	m	struct:s_parse
time_sleep	inc/philo.h	/^	int	time_sleep;$/;"	m	struct:s_parse
timestamp	src/main.c	/^int	timestamp(struct timeval launch_time, char c)$/;"	f
utimestamp	src/main.c	/^void	utimestamp(struct timeval launch_time, char *str)$/;"	f
